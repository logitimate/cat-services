"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const rxjs_1 = require("rxjs");
const typeorm_1 = require("typeorm");
const typeorm_utils_1 = require("./typeorm.utils");
let TypeOrmCoreModule = TypeOrmCoreModule_1 = class TypeOrmCoreModule {
    constructor(options, moduleRef) {
        this.options = options;
        this.moduleRef = moduleRef;
    }
    static forRoot(options = {}) {
        const { retryAttempts, retryDelay, keepConnectionAlive } = options, typeOrmOptions = __rest(options, ["retryAttempts", "retryDelay", "keepConnectionAlive"]);
        const keepConnectionOptionProvider = {
            provide: 'TYPEORM_MODULE_OPTIONS',
            useValue: options,
        };
        const connectionProvider = {
            provide: typeorm_utils_1.getConnectionToken(typeOrmOptions),
            useFactory: () => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (keepConnectionAlive) {
                        return typeorm_1.getConnection(typeorm_utils_1.getConnectionName(typeOrmOptions));
                    }
                }
                catch (_a) { }
                return yield rxjs_1.from(typeOrmOptions.type
                    ? typeorm_1.createConnection(typeOrmOptions)
                    : typeorm_1.createConnection())
                    .pipe(typeorm_utils_1.handleRetry(retryAttempts, retryDelay))
                    .toPromise();
            }),
        };
        const entityManagerProvider = {
            provide: typeorm_utils_1.getEntityManagerToken(options),
            useFactory: (connection) => connection.manager,
            inject: [typeorm_utils_1.getConnectionToken(options)],
        };
        return {
            module: TypeOrmCoreModule_1,
            providers: [
                entityManagerProvider,
                connectionProvider,
                keepConnectionOptionProvider,
            ],
            exports: [entityManagerProvider, connectionProvider],
        };
    }
    onModuleDestroy() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.options.keepConnectionAlive) {
                return;
            }
            const connection = this.moduleRef.get(typeorm_utils_1.getConnectionToken(this.options));
            connection && (yield connection.close());
        });
    }
};
TypeOrmCoreModule = TypeOrmCoreModule_1 = __decorate([
    common_1.Global(),
    common_1.Module({}),
    __param(0, common_1.Inject('TYPEORM_MODULE_OPTIONS')),
    __metadata("design:paramtypes", [Object, core_1.ModuleRef])
], TypeOrmCoreModule);
exports.TypeOrmCoreModule = TypeOrmCoreModule;
var TypeOrmCoreModule_1;
